{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"PY_THODAR","text":"<p>PY_THODAR (Python Thodar \u2192 \u0ba4\u0bca\u0b9f\u0bb0 = series / continue / uninterrupted) is a collaborative space for students to learn, build, and showcase their applications.  </p> <p>This organization hosts repositories for: - Workshops &amp; tutorials on Git, GitHub, VS Code, and GitHub Classroom - Example projects like Say Thanks (Python) &amp; Save Soil (JavaScript) - Student-driven app development from idea \u2192 MVP \u2192 full product - Demo days &amp; final showcase events (e.g., PyExpo)  </p>"},{"location":"index.html#vision","title":"Vision","text":"<p>To build a culture of continuous learning, collaboration, and creativity, where every student creates and improves their own app before the end of the semester.  </p>"},{"location":"index.html#how-it-works","title":"How It Works","text":"<ol> <li>Learn the Tools \u2192 Git, GitHub, VS Code, GitHub Desktop, Classroom.  </li> <li>Start Small \u2192 Build a Minimum Viable Product (MVP).  </li> <li>Keep Growing \u2192 Incrementally add features &amp; improvements.  </li> <li>Show &amp; Share \u2192 Present progress in regular demo sessions.  </li> <li>Celebrate \u2192 Showcase your final app at PyExpo!  </li> </ol>"},{"location":"index.html#what-youll-find-here","title":"What You\u2019ll Find Here","text":"<ul> <li><code>workshops/</code> \u2192 Hands-on sessions &amp; starter repos  </li> <li><code>examples/</code> \u2192 Reference apps (Python &amp; JavaScript)  </li> <li><code>students/</code> \u2192 Individual &amp; team app projects  </li> <li><code>resources/</code> \u2192 Learning guides, docs, and useful links  </li> </ul>"},{"location":"index.html#inspiration","title":"Inspiration","text":"<ul> <li>Say Thanks App \u2192 A Python-based gratitude &amp; feedback platform.  </li> <li>Save Soil App \u2192 A JavaScript app for raising awareness through Twitter &amp; AI-powered suggestions.  </li> </ul> <p>Both show how simple ideas can grow into meaningful projects.  </p>"},{"location":"index.html#contribution-guidelines","title":"Contribution Guidelines","text":"<ul> <li>Fork \u2192 Build \u2192 Commit \u2192 Pull Request  </li> <li>Keep your commits clean &amp; meaningful  </li> <li>Respect others\u2019 work and collaborate actively  </li> </ul>"},{"location":"index.html#organization-name","title":"Organization Name","text":"<p>PY_THODAR stands for continuity in learning and building \u2014 just like code, learning never stops.  </p> <p>PY_THODAR \u2013 Code. Continue. Create. </p>"},{"location":"about.html","title":"About","text":"<ul> <li>Working on this page</li> </ul>"},{"location":"Git/01_Config.html","title":"Git Fundamentals","text":""},{"location":"Git/01_Config.html#ever-seen-this-before","title":"Ever Seen This Before?","text":"<ul> <li>final_project.doc</li> <li>final_project_v2.doc</li> <li>final_project_FINAL.doc</li> <li>final_project_FINAL_REALLY.doc</li> </ul> <p>We usually version our files this way. It\u2019s messy, confusing, and easy to lose track!</p>"},{"location":"Git/01_Config.html#theres-a-better-way","title":"There\u2019s a Better Way","text":"<p>Manually saving multiple versions leads to: 1. Confusion about which version is the latest 2. Risk of accidental overwrites or lost work 3. No clear record of who changed what and why 4. Difficult collaboration across teams</p> <p>What if there was a system that automatically tracked changes, helped you collaborate safely, and let you go back in time when needed?</p> <p>Answer is Version Control</p>"},{"location":"Git/02_Fundamental_01.html","title":"What is Version Control?","text":"<p>A Version Control System (VCS) is a tool that helps manage changes to files over time. It records every modification made to a file or a set of files, allowing teams to monitor progress, track revisions, and coordinate work efficiently.</p> <p>With a VCS, users can:</p> <pre><code>- Maintain a complete history of changes, including who made them and when.\n- Revert to previous versions when errors occur or rollbacks are needed.\n- Work collaboratively, even in parallel, without the risk of overwriting each other\u2019s contributions.\n- Identify and resolve conflicts, ensuring that merged changes are accurate and consistent.\n</code></pre>"},{"location":"Git/02_Fundamental_01.html#types-of-version-control","title":"Types of Version Control","text":""},{"location":"Git/02_Fundamental_01.html#1-local-version-control","title":"1. Local Version Control","text":"<p>Local Version Control</p> <ul> <li>Changes are tracked on your computer only.  </li> <li>Simple but risky \u2192 if your system crashes, you lose everything.  </li> <li>Example: Saving multiple copies manually </li> </ul> <p></p>"},{"location":"Git/02_Fundamental_01.html#2-centralized-version-control-cvcs","title":"2. Centralized Version Control (CVCS)","text":"<p>Centralized Version Control</p> <ul> <li>There's one main server that holds all files.  </li> <li>Everyone gets files from it and pushes their changes to it.  </li> <li>Problem \u2192 If that server fails, everything stops.  </li> <li>Example: Subversion (SVN), Perforce </li> </ul> <p></p>"},{"location":"Git/02_Fundamental_01.html#3-distributed-version-control-dvcs","title":"3. Distributed Version Control (DVCS)","text":"<p>Distributed Version Control</p> <ul> <li>Everyone has a full copy of the entire project history.  </li> <li>You don\u2019t need to be online to track changes.  </li> <li>Safer and faster \u2192 if one system crashes, others still have the full project.  </li> <li>Example: Git, Mercurial </li> </ul> <p></p>"},{"location":"Git/02_Fundamental_01.html#quick-comparison","title":"Quick Comparison","text":"Feature Local VCS Centralized VCS Distributed VCS Storage Only on your computer On a central server On every developer\u2019s system Risk \u274c High \u2013 system crash = data loss \u26a0\ufe0f Medium \u2013 server crash = downtime \u2705 Low \u2013 copies everywhere Examples Manual copies SVN, Perforce Git, Mercurial <p>Remember</p> <ul> <li>Local VCS \u2192 Simple but risky  </li> <li>Centralized VCS \u2192 Solved some issues, but still had a single point of failure </li> <li>Distributed VCS \u2192 Best of both worlds, making Git the most widely used system today</li> </ul>"},{"location":"blog/index.html","title":"Py_Thodar Blog","text":"<ul> <li>Yet to post</li> </ul>"}]}